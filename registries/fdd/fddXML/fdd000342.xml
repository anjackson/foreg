<?xml version="1.0" encoding="UTF-8"?>
<?altova_sps fddCreation.sps?>
<fdd:FDD id="fdd000342" titleName="Matroska Multimedia Container" shortName="Matroska " xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fdd=".\fdd.xsd" xsi:schemaLocation=".\fdd.xsd fdd.xsd">
	<fdd:properties>
		<fdd:gdfrGenreSelection>
			<fdd:gdfrGenreAndSubgenres>
				<fdd:gdfrGenre>moving-image</fdd:gdfrGenre>
				<fdd:gdfrSubgenres>
					<fdd:gdfrSubgenre>sound</fdd:gdfrSubgenre>
					<fdd:gdfrSubgenre>aggregate</fdd:gdfrSubgenre>
				</fdd:gdfrSubgenres>
			</fdd:gdfrGenreAndSubgenres>
		</fdd:gdfrGenreSelection>
		<fdd:formatCategories>
			<fdd:category>file-format</fdd:category>
		</fdd:formatCategories>
		<fdd:gdfrComposition>container-wrapper</fdd:gdfrComposition>
		<fdd:gdfrForm>binary</fdd:gdfrForm>
		<fdd:gdfrConstraint>unstructured</fdd:gdfrConstraint>
		<fdd:updates>
			<fdd:date>2012-05-29</fdd:date>
		</fdd:updates>
		<fdd:draftStatus>Partial</fdd:draftStatus>
	</fdd:properties>
	<fdd:identificationAndDescription>
		<fdd:fullName>Matroska Multimedia Container</fdd:fullName>
		<fdd:keywords>
			<fdd:keyword>Matroska</fdd:keyword>
			<fdd:keyword>MKV</fdd:keyword>
			<fdd:keyword>MK3D</fdd:keyword>
			<fdd:keyword>MKS</fdd:keyword>
			<fdd:keyword>MKA</fdd:keyword>
			<fdd:keyword>container formats</fdd:keyword>
			<fdd:keyword>wrapper formats</fdd:keyword>
		</fdd:keywords>
		<fdd:description>Audiovisual file format that can wrap an unlimited number of video, audio, still picture, and/or subtitle tracks.  A wide range of audio and video encodings are supported, as described on the <a href="http://www.matroska.org/news/webm-matroska.html">Matroska Codec Page</a>, consulted May 11, 2012.  The Matroska developer&apos;s site calls attention to the ways in which the format overcomes some of the limitations of the AVI wrapper, supporting &quot;all known audio and video compression formats by design.&quot;<footNote id="1"/> The code is written in Extensible Binary Meta Language (EBML), and the developers state that this provides &quot;significant advantages in terms of future format extensibility, without breaking file support in old parsers.&quot;  Large essences, like video, are broken into blocks, which are grouped into blockgroups and clusters each carrying a header.  Practice guidance from the <a href="http://matroska.org/technical/diagram/index.html ">Matroska Codec Page</a> states that &quot;there is no set limit to how much data a Cluster can contain . . . but so far developers seem to like to place the limit at 5 seconds or 5 megabytes.&quot;  Header data is a part of the format structure that supports playback; other parts include the optional metaseek section, which contains an index of the other groups in the file, e.g., <i>track information, chapters, tags, cues</i>, etc. </fdd:description>
		<fdd:shortDescription> Audiovisual file format that can wrap an unlimited number of video, audio, still picture, and/or subtitle tracks.  A wide range of audio and video encodings are supported.</fdd:shortDescription>
		<fdd:productionPhase>A final state format for enduser delivery.</fdd:productionPhase>
		<fdd:relationships>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has subtype</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000343</fdd:id>
					<fdd:shortName>Matroska_FFV1</fdd:shortName>
					<fdd:titleName>Matroska File Format with FFV1 video encoding</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has subtype</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000344</fdd:id>
					<fdd:shortName>Matroska_AVC</fdd:shortName>
					<fdd:titleName> Matroska File Format with MPEG-4, Advanced Video Coding (Part 10) (H.264)</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has subtype</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000345</fdd:id>
					<fdd:shortName>Matroska_MPEG-2</fdd:shortName>
					<fdd:titleName>Matroska File Format with MPEG-2 Video Encoding (H.262)</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has subtype</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000346</fdd:id>
					<fdd:shortName>Matroska_LPCM</fdd:shortName>
					<fdd:titleName>Matroska File Format with LPCM Audio Encoding</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Has subtype</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:id>fdd000347</fdd:id>
					<fdd:shortName>Matroska_MP3</fdd:shortName>
					<fdd:titleName>Matroska File Format with MP3 Audio Encoding</fdd:titleName>
				</fdd:relatedTo>
			</fdd:relationship>
			<fdd:relationship>
				<fdd:typeOfRelationship>Other</fdd:typeOfRelationship>
				<fdd:relatedTo>
					<fdd:shortName> EBML</fdd:shortName>
					<fdd:titleName>Extensible Binary Meta Language, not described at this Web site at this time</fdd:titleName>
				</fdd:relatedTo>
				<fdd:comment>Language used to code the Matroska file format.</fdd:comment>
			</fdd:relationship>
		</fdd:relationships>
	</fdd:identificationAndDescription>
	<fdd:localUse>
		<fdd:experience>None</fdd:experience>
	</fdd:localUse>
	<fdd:sustainabilityFactors>
		<fdd:disclosure>Fully documented. Developed as an open source project; see history section of the <a href="#notes">Notes</a> below.</fdd:disclosure>
		<fdd:documentation>Published online at <a href="http://www.matroska.org/technical/specs/index.html">http://www.matroska.org/technical/specs/index.html</a>
		</fdd:documentation>
		<fdd:adoption>Modest adoption in heritage repositories. The City of Vancouver Archives uses FFV1 encoded video wrapped in the Matroska container, as discussed briefly on the archives&apos; blog.  This implementation is connected to the Canadian <a href="http://www.archivematica.org/wiki/Main_Page">Archivematica</a> project, whose Wiki lists Matroska-wrapped FFV1 video and LPCM audio as one of its preservation formats.  Matroska also plays a critical role in the <a href="http://www.webmproject.org/">WebM</a> open media project.
	<br/>According to the Wikipedia article <a href="http://en.wikipedia.org/wiki/Matroska">Matroska</a>, consulted on May 11, 2012, a number of software applications support Matroska, including  Zoom Player, MPlayer, VLC, KMPlayer, ALLPlayer, Elmedia Player, foobar2000, HandBrake, Pinnacle Studio, and PowerDVD, as well as media centers such as Plex, Boxee, PS3 Media Server and XBMC, and the Web browser Google Chrome. Hardware support is provided on some Blu-ray players and media centers like Asus, OPPO Digital, Panasonic, LG, Samsung, Sharp, LaCie and Western Digital.
Modest adoption in heritage repositories.</fdd:adoption>
		<fdd:licensingAndPatents>The Matroska <a href="http://www.matroska.org/news/webm-matroska.html">website</a> says this: &quot;Matroska is an open standards project. This means for personal use it is absolutely free to use and that the technical specifications describing the bitstream are open to everybody, even to companies that would like to support it in their products. The source code of the libraries developed by the Matroska Development Team is licensed under GNU L-GPL. In addition to that, there are also free parsing and playback libraries available under the BSD license, for commercial software and Hardware adoption.&quot; According to <a href="http://en.wikipedia.org/wiki/Matroska">Wikipedia</a>, consulted May 10, 2012,  &quot;CoreCodec owns the copyrights and trademarks for the Matroska specification.&quot;</fdd:licensingAndPatents>
		<fdd:transparency>Depends upon included encodings, some of which will depend upon algorithms and tools to read and require sophistication to build tools.</fdd:transparency>
		<fdd:selfDocumentation>
			<p>The Matroska website provides a <a href="http://matroska.org/technical/diagram/index.html">diagram</a> of the sections of the wrapper. Technical and descriptive metadata can be found in a few different places in the wrapper.  Technical metadata appears in the Track section, as described on the Matroska developer website: &quot;The Track section has basic information about each of the tracks. For instance, is it a video, audio or subtitle track? What resolution is the video? What sample rate is the audio? The Track section also says what codec to use to view the track, and has the codec&apos;s private data for the track.&quot;  Matroska has established <a href="http://www.matroska.org/technical/specs/codecid/index.html">identifiers</a> for the codecs it supports, similar to the FOURCC and other identifiers that provide a higher level of specificity (often to the coding profile level) than Internet Media Types (aka MIME types).  Timecode metadata is provided in the headers for blocks, blockgroups, and clusters.</p>
			<p>At least two locations may contain descriptive metadata, according to the developer&apos;s <a href="http://www.matroska.org/technical/diagram/index.html">website</a>:</p>
			<ul>
				<li>&quot;The Segment Information section contains basic information relating to the whole file. This includes the title for the file, a unique ID so that the file can be identified around the world, and if it is part of a series of files, the ID of the next file.&quot;</li>
				<li>Descriptive metadata can be embedded in the Tagging section. According to the website: &quot;The Tagging section contains all of the Tags that relate to the the file and each of the tracks. These tags are just like the ID3 tags found in MP3&apos;s. It has information such as the singer or writer of a song, actors that were in the video, or who made the video.&quot;</li>
			</ul>
		</fdd:selfDocumentation>
		<fdd:externalDependencies>The Matroska <a href="http://www.matroska.org/technical/guides/faq/index.html">website</a> states that Matroska files need a DirectShow parser filter [CCCP (Combined Community Codec Pack) is the current choice] to playback through DirectShow media players such as Windows Mediaplayer on Windows-machines. Other non-DirectShow players like VLC and MPV can play MKV files without the need for a parser. Mac and Linus operating systems similarly don't need a DirectShow parser since it's a Windows-only concern.  
		</fdd:externalDependencies>
		<fdd:techProtection>Encryption is supported and the Matroska <a href="http://matroska.org/technical/specs/notes.html">website</a> states that &quot;It is easily possible to use the encryption framework in Matroska as a type of DRM.&quot;</fdd:techProtection>
	</fdd:sustainabilityFactors>
	<fdd:qualityAndFunctionalityFactors>
		<fdd:movingImageQF>
			<fdd:normalVideo>Good support.</fdd:normalVideo>
			<fdd:clarity>Varies according to encoding. See <fddLink id="fdd000341">FFV1</fddLink>, <fddLink id="fdd000081">MPEG-4_AVC</fddLink> and <fddLink id="fdd000028">MPEG-2</fddLink>.</fdd:clarity>
			<fdd:beyondVideo>
				<p>A common use of Matroska is to harvest the information from an authored DVD in a way that preserves some of the functionality of the DVD. The Matroska <a href="http://www.matroska.org/news/webm-matroska.html">website</a> lists several of the features of the container that can help the user retain some of the experience of an authored DVD: </p>
				<ul>
					<li>Selectable subtitle/audio/video streams </li>
					<li>Modularly expandable </li>
					<li>Error resilience (can recover playback even when the stream is damaged)</li>
					<li>Menus (like DVDs have)</li>
				</ul>
				<p>More about converting DVDs to Matroska can be found <a href="http://matroska.org/technical/guides/dvd/index.html">on the Matroska website</a>.</p>
				<p>Matroska can also contain 3D video. The authors of this document do not know of examples of 3D video in Matroska files so <a href="http://www.digitalpreservation.gov/formats/contact_format.shtml">comments are welcome</a>. The Matroska <a href="http://matroska.org/technical/specs/notes.html">website</a> notes that &quot;3D support is still in infancy and may evolve to support more features.&quot; See <a href="#notes">Notes</a> below for more about 3D.</p>
			</fdd:beyondVideo>
		</fdd:movingImageQF>
		<fdd:soundQF>
			<fdd:normalSound>Good support.</fdd:normalSound>
			<fdd:fidelity>Varies according to encoding. See <fddLink id="fdd000011">LPCM</fddLink> and <fddLink id="fdd000012">MP3_ENC</fddLink>.</fdd:fidelity>
			<fdd:beyondSound>
				<p>Matroska can be used to contain audio-only content in ways that simulate the experience of a CD. The Matroska <a href="http://www.matroska.org/news/webm-matroska.html">website</a> lists several of the features of the container that can help the user retain some of the experience of an audio CD:</p>
				<ul>
					<li>All tracks to a CD can be in a single file. You have the option of dividing the tracks into separate Tracks, or separate Chapters. You could make your own compilation in a single file, even using different audio formats, such as MP3 and Vorbis.</li>
					<li>It is easy to delete portions of the audio without reencoding because you just throw away those blocks. You don&apos;t even have to be able to play that format back, you could edit by just knowing timecodes.
</li>
					<li>Detecting differences between two audio streams would be easy because you could store both in a single file, start playback, and then just switch between tracks.
</li>
					<li>You can embed lyrics or transcriptions (e.g. from srt subtitles) in the audio file. </li>
				</ul>
			</fdd:beyondSound>
		</fdd:soundQF>
	</fdd:qualityAndFunctionalityFactors>
	<fdd:fileTypeSignifiers>
		<fdd:signifiersGroup>
			<fdd:filenameExtension>
				<fdd:sigValues>
					<fdd:sigValue>mkv</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>For video (which can contain audio and/or subtitles) files</fdd:note>
			</fdd:filenameExtension>
			<fdd:filenameExtension>
				<fdd:sigValues>
					<fdd:sigValue>mka</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>For audio-only files</fdd:note>
			</fdd:filenameExtension>
			<fdd:filenameExtension>
				<fdd:sigValues>
					<fdd:sigValue>mks</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>For subtitles-only files</fdd:note>
			</fdd:filenameExtension>
			<fdd:filenameExtension>
				<fdd:sigValues>
					<fdd:sigValue>mk3d</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>For stereoscopic video files. See <a href="#notes">Notes</a> below.</fdd:note>
			</fdd:filenameExtension>
			<fdd:internetMediaType>
				<fdd:sigValues>
					<fdd:sigValue>video/x-matroska </fdd:sigValue>
					<fdd:sigValue>audio/x-matroska </fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>Selected from <a href="http://filext.com/">The File Extension Source</a>.</fdd:note>
			</fdd:internetMediaType>
			<fdd:magicNumbers>
				<fdd:sigValues>
					<fdd:sigValue>1A 45 DF A3 93 42 82 88
6D 61 74 72 6F 73 6B 61</fdd:sigValue>
				</fdd:sigValues>
				<fdd:note>From <a href="http://www.garykessler.net/library/file_sigs.html">Gary Kessler's File Signatures Table</a>. The first four hex characters in this string are used to identify Extensible Binary Meta Language (EMBL).</fdd:note>
			</fdd:magicNumbers>
		</fdd:signifiersGroup>
	</fdd:fileTypeSignifiers>
	<fdd:notes>
		<fdd:general>
			<p>Matroska is an English word derived from the Russian word Matryoshka which means nesting doll, a reference to this format&apos;s ability to wrap a number of component elements.</p>
			<p>Regarding Extensible Binary Meta Language (EBML): The File Extension Guide has a <a href="http://filext.com/file-extension/mkv">page</a> about the Matroska mkv extension that includes this description: &quot;EBML specifies a binary and octet (byte) aligned format inspired by the principle of XML. EBML itself is a generalized description of the technique of binary markup. Like XML, it is completely agnostic to any data that it might contain. . . .  Matroska is a specific implementation [that] seeks to define a subset of the EBML language in the context of audio and video data (though it obviously isn&apos;t limited to this purpose). The format is made of 2 parts: the semantic and the syntax. The semantic specifies a number of IDs and their basic type and is not included in the data file/stream.&quot;
</p>
			<p>Regarding timecodes, the Matroska <a href="http://matroska.org/technical/specs/notes.html">website</a> reports that the Block&apos;s timecode is a signed integer that represents the raw timecode relative to the Cluster&apos;s Timecode, multiplied by the TimecodeScale (value expressed in header metadata).  The Block&apos;s timecode is represented by a 16bit signed integer (sint16).  The default value of TimecodeScale consists of integers that represent 1ms, meaning that the maximum time span of Blocks in a Cluster is 65536ms.  The compiler of this format description was unable to determine whether a Matroska-file-producing application might be able to carry over the pre-existing timecode found on a source videotape, an outcome sought in some preservation reformatting activities.</p>
			<p>Regarding 3D, multi-planar, and stereoscopic video footage, the same Matroska Web page offers an extensive discussion, excerpted here:  &quot;There are 2 different ways to compress 3D videos: have each &apos;eye&apos; track in a separate track and have one track have both &apos;eyes&apos; combined inside (which is more efficient, compression-wise). . . .   For the single track variant, there is the StereoMode element which defines how planes are assembled in the track (mono or left-right combined).  Odd values of StereoMode means the left plane comes first for more convenient reading. The pixel count of the track (PixelWidth/PixelHeight) should be the raw amount of pixels (for example 3840x1080 for full HD side by side) and the DisplayWidth/Height in pixels should be the amount of pixels for one plane (1920x1080 for that full HD stream).  Old stereo 3D were displayed using anaglyph (cyan and red colours separated).  For compatibility with such movies, there is a value of the StereoMode that corresponds to AnaGlyph.  There is also a &quot;packed&quot; mode (values 13 and 14) which consists of packing 2 frames together in a Block using lacing. The first frame is the left eye and the other frame is the right eye (or vice versa). The frames should be decoded in that order and are possibly dependent on each other (P and B frames).  For separate tracks, Matroska needs to define exactly which track does what. TrackOperation with TrackCombinePlanes do that.&quot;</p>
			<p>An MKV file can also contain associated essences that are not moving image or audio in the &quot;Attachment&quot; section of the container. From the Matroska <a href="http://www.matroska.org/news/webm-matroska.html">website</a>: &quot;The Attachment section is for attaching any type of file you want to a Matroska file. You could attach anything, pictures, webpages, programs, even the codec needed to play back the file. What you attach is up to you.&quot;</p>
		</fdd:general>
		<fdd:history>Matroska is an offshoot of the <a href="http://en.wikipedia.org/wiki/Multimedia_Container_Format">Multimedia Container Format</a> project. According to <a href="http://en.wikipedia.org/wiki/Matroska">Wikipedia</a>, consulted May 10, 2012, Matroska &quot;was announced on 6 December 2002 as a fork of the Multimedia Container Format (MCF), after disagreements between MCF lead developer Lasse Kärkkäinen and soon-to-be Matroska founder Steve Lhomme about the use of the Extensible Binary Meta Language (EBML) instead of a binary format. This coincided with a long coding break by the MCF&apos;s lead developer, during which most of the community quickly migrated to the new project.&quot;</fdd:history>
	</fdd:notes>
	<fdd:formatSpecifications>
		<fdd:urls>
			<fdd:url>
				<fdd:urlReference>
					<link>http://matroska.org/technical/specs/index.html </link>
					<tag>Matroska Specification </tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>http://www.matroska.org/files/matroska.pdf</link>
					<tag>Elements of the Matroska File Format</tag>
				</fdd:urlReference>
			</fdd:url>
		</fdd:urls>
	</fdd:formatSpecifications>
	<fdd:usefulReferences>
		<fdd:urls>
			<fdd:url>
				<fdd:urlReference>
					<link>http://www.archivematica.org/wiki/Media_type_preservation_plans</link>
					<tag>Archivematica&apos;s list of media types listing MKV as one of their &quot;preservation formats&quot;</tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>http://www.vancouverarchives.ca/2011/11/celebrating-%E2%80%9Chollywood-north%E2%80%9D-yaletown-productions-inc-fonds/</link>
					<tag>A City of Vancouver Archives&apos; blog post mentioning their use of Matroska</tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>http://matroska.org/technical/specs/codecid/index.html</link>
					<tag>Detailed list of video and audio encodings that can be found in Matroska files</tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>http://matroska.org/technical/diagram/index.html</link>
					<tag>Diagram of the sections of a Matroska file</tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>http://filext.com/</link>
					<tag>The File Extension Source</tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>http://www.garykessler.net/library/file_sigs.html</link>
					<tag>Gary Kessler's File Signatures Table</tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>http://matroska.org/technical/guides/dvd/index.html</link>
					<tag>Conversion of DVDs to Matroska</tag>
				</fdd:urlReference>
			</fdd:url>
			<fdd:url>
				<fdd:urlReference>
					<link>http://mod16.org/hurfdurf/?p=8</link>
					<tag>101 things you never knew you could do with Matroska</tag>
				</fdd:urlReference>
			</fdd:url>
		</fdd:urls>
	</fdd:usefulReferences>
	<fdd:footNotes>
		<fdd:footNote id="1">
			<fdd:text>The Matroska developers&apos; <a href="http://www.matroska.org/news/webm-matroska.html">website</a> has this to say about Matroska and AVI:&quot;The AVI container was originally introduced by Microsoft in the early 90s, and was designed as a very flexible A/V container format for the video and audio compression formats of those days. It is necessary to understand that AVI is only one ( but important ) part of a complete multimedia framework called &apos;Video For Windows&apos; ( VfW ), offering programmers not only a container but also a complete set of API commands to be able to program their own video and audio codecs, using either the VfW or the ACM interface... Unfortunately this VfW framework cannot support many of the more advanced features that modern audio and video compression formats will offer, such as Variable Bitrate audio encoding ( VBR ), or Variable Framerate video encoding ( VFR ). Although AVI was extended with an additional standard called &apos;Open DML AVI&apos; in the mid/late 90s, overcoming most of its very annoying limitations like the 2 GB file size limit, there is still no proper and spec compliant way to support modern compression formats like the excellent, opensource Ogg Vorbis audio compression format.&quot;</fdd:text>
		</fdd:footNote>
	</fdd:footNotes>
</fdd:FDD>
